{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Histograms are a way to see how often certain values appear in your dataset, helping to quickly determine the answer to many statistical questions. They are widely used and are a critical tool for any scientist to have in their pocket. In Python, it's possible to quickly create histogram plots using libraries like <code>matplotlib</code>, and <code>pandas</code>. These tools allow you to not only plot the raw data but to adjust bin sizes, add labels, and layer in additional information to make your data clearer. For more power, the Python library <code>numpy</code> allows you to make histogram data structures that you can work with programmatically or plot. In this lesson, you'll learn how to:</p> <ul> <li> <p>Create simple histograms using <code>matplotlib</code> and <code>pandas</code></p> </li> <li> <p>Understand bins and learn to customize their number and sizes</p> </li> <li> <p>Compare multiple datasets on the same histogram</p> </li> <li> <p>Interpret the shapes of histograms to learn about your data.</p> </li> <li> <p>Use <code>numpy</code> to make histogram data structures</p> </li> </ul> <p>For this lesson, we'll be using real data taken in the University of Colorado Denver's physics program from a Gamma Spectroscopy lab. The data was collected from exposing a scintillator and photomultiplier tube to multiple different known radioactive sources with the goal of determining the composition of a final unidentified source. </p> <p>If you are new to programming, it's recommended that you first take a few minutes to go over this short lesson talking about how to read technical documentation.</p> <p>Let's get started by installing the newest versions of Python, matplotlib, and pandas. Click here to continue to the next section to setup our machine and download the necessary files for this lesson.</p>"},{"location":"01_setup/","title":"Setup","text":"<p>This lesson will be using Python 3 along with two of its more common libraries: <code>matplotlib</code>, and <code>numpy</code>. We will be using Anaconda for our purposes here - Anaconda installs a launcher with Jupyter Notebook as one of the options. Jupyter Notebooks will be used for their cells which make dividing up processes more convenient when working with Python.</p> <p>For advanced users looking for more features in your IDE: For a complete list of Python IDEs that you can explore, click here.</p> <p>To get started downloading Anaconda, follow this link. Anaconda is free, and if you don't want to create an account with them click the \"skip registration\" link inside the \"Free Download\" box. Don't download \"Miniconda\", instead, download the full distribution with the Distribution installers for your OS. </p> <p>Next, create a folder to house your project files, named something like \"histogram\". After doing this, download and unzip this raw data file. Then, you can move this file into your project folder. </p> <p>Finally, create a new notebook by clicking on <code>New</code> and <code>Notebook</code> and selecting the kernel: <code>Python 3 (ipykernel)</code>. You can then either name your project or keep it untitled.</p> <p>Here's a short video showing the process of opening a Jupyter Notebook and running a code cell (skipping the step of creating a new folder):</p> <p>If you're having trouble loading this video, you may have to open it in a new tab, window, or browser. Click here for the link to the video.</p> <p>Now, let's get started plotting our data! Click here to continue on to the next section where we'll learn the basics of making and using histograms.</p>"},{"location":"02_understanding_histograms/","title":"Understanding Histograms","text":"<p>Before we get started, let's take a quick look at some of our data. Here we can see the first 10 values as recorded:</p> <pre><code>1.780899360489525179e+03\n3.227395719771547533e+02\n1.455079922763120805e+02\n1.356769962678787806e+03\n3.317730729724006551e+02\n3.136292283517848887e+02\n1.156268173200431875e+03\n1.714656378754030186e+02\n3.727997265676052621e+02\n1.363714678853047189e+03\n</code></pre> <p>Just looking at this, it can be overwhelming to try and determine what is happening. The numbers appear to be random with no pattern in their appearance.</p> <p>In this gamma spectroscopy data, each value corresponds to a given photon energy which is then put into one of 2048 bins. For a more complete explanation of the experiment and data collection methods, see the experiment section of our data fitting lesson.</p> <p>We can visualize how this data was collected by creating a gif showing how each new detection is stored as a new count (y-axis) in the channels/bins (x-axis).</p> <p></p> <p>In this gif, each new frame represents another 300 detection events. Over time, this eventually creates a visible pattern related to the radioactive element that was placed in the system. This is a histogram of our data. The total dataset (without reducing the number of bins) looks like:</p> <p></p> <p>A histogram is a type of graph used to represent the distribution of numerical data, and is especially useful in cases such as this where the data is not continuous. Unlike a line or a bar graph where each value or category is plotted directly, a histogram groups data into ranges, called bins, and then counts how many data points fall into each range. In the above gif, the number of bins is the number of channels, making the data appear coarse and noisy. But the power of a histogram is in our ability to manipulate the number of bins to visualize our data. </p>"},{"location":"02_understanding_histograms/#bins","title":"Bins","text":"<p>Bins divide the range of x-values (channel numbers) into equal-width segments. Each bin groups all the data points that fall within its range and tallies how many there are, giving us a y-axis with units of counts. </p> <p>Choosing the right number of bins is a balance between detail and readability:</p> <ul> <li> <p>More bins \\(\\to\\) More detail, higher resolution, but potentially noisier. This may help you resolve closely spaced peaks, but it can also amplify noise or fluctuations.</p> </li> <li> <p>Fewer bins \\(\\to\\) Smoother curve, but less resolution. This can help to clarify general trends and reduce noise, but it may blur out small but relevant peaks.</p> </li> </ul> <p></p> <p>You will have to experiment with different bin settings depending on what it is that you want to analyze. Choosing the mathematically optimized number of bins can be incredibly complicated, but practically speaking it is normally effective to trust your eyes. It should look somewhat smooth but still contain notable features. </p> <p>Creating a histogram of our data allows us to identify patterns in large datasets such as:</p> <ul> <li> <p>Where do the values concentrate?</p> </li> <li> <p>Are there clear peaks?</p> </li> <li> <p>Are there gaps or outliers?</p> </li> <li> <p>What's the range and shape of the data distribution? </p> </li> </ul> <p>Now that we have a basic understanding of the features of histograms, click here to continue to the next section where we can learn the commands to create them.</p>"},{"location":"03_plotting_data/","title":"Importing modules","text":"<p>In order to access data stored in our <code>.txt</code> file, you can use Python's <code>numpy</code> library to read the file before using <code>matplotlib</code> to create the histogram. This is a common workflow in data analysis for exploring the distribution of data. Let's get started by ensuring that you have these libraries installed.</p> <p>In a Jupyter cell, it's possible to run terminal commands prefacing them with <code>!</code>, but you can also open a terminal from the <code>Home</code> page by selecting <code>New &gt; Terminal</code> (near the top right of the screen):</p> <pre><code>pip install numpy\npip install matplotlib\n</code></pre> <p>After completing these installs, you'll have to make sure that the modules are imported at the start of your code. In your first cell, include the lines:</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n</code></pre>"},{"location":"03_plotting_data/#making-the-histogram","title":"Making the Histogram","text":"<p>Let's begin working to load in our data. One way to simplify this process if you're working with multiple similar files is to create a method. This allows us to load and plot any <code>.txt</code> files which follow the same format instead of repeating the steps for plotting the data for each file. </p> <p>Let's name our method <code>plot_histogram</code> and have it take a <code>filepath</code>, a number of <code>bins</code>, and a <code>title</code> as its inputs. Then, we can use <code>np.loadtxt()</code> to load our source file and assign it to a variable, allowing us to create our plot. By having our method take <code>bins</code> and <code>title</code> as arguments, this allows us to adjust the <code>bin</code> value or change the plot's title on future method calls while setting a default value for both. We can also have the graph state the number of bins we used along our x-axis and automatically save the file with our given title using <code>plt.savefig()</code>. If we use the <code>title</code> to generate the file name, then as long as that variable is adjusted the file's won't conflict. However, this may cause errors if the <code>title</code> field is left empty, or it may overwrite a previous version if the field is not changed.   </p> <p>Putting this altogether gives us:</p> <pre><code>def plot_histogram(filepath, bins=100, title=' '):\n    data = np.loadtxt(filepath)\n    # Create plot\n    plt.hist(data, bins=bins)\n    # Label axes\n    plt.xlabel(f'Channels ({bins} bins)')\n    plt.ylabel('Count')\n    plt.title(f'{title}')\n    # Save image\n    plt.savefig(f'{title}.jpg')\n    plt.show()\n</code></pre> <p>Now we can simply call our function and it will generate a plot for us with the specified title and number of bins. Let's try out a couple different options. First, let's try only passing the <code>filepath</code> as an argument. As <code>bins</code> and <code>title</code> are defined in the function call, it will leave those values as they are.</p> <pre><code>plot_histogram('energies.txt')\n</code></pre> <p>Output:</p> <p></p> <p>Now we can try seeing what happens if we adjust the bin count and the title. Let's say that at 100 bins our graph looks a bit too noisy for our purposes, so we'll try a value of 60. We can say we know that the data was collected from a sample of Cobalt-60, so we can use that as our title. Let's try out:</p> <pre><code>plot_histogram('energies.txt', bins=60, title='Cobalt-60')\n</code></pre> <p>Output:</p> <p></p> <p>With these examples, you can see how flexible a single plotting function can be. By changing just a couple arguments, you can adjust the look and labeling of your histogram to better suit your data and presentation needs. At this point, you've learned the essentials of reading in a dataset, building a reusable method, and generating clear plots that can be customized and saved for later use.</p> <p>This has been a very bare-bones introduction to creating and using histogram plots, but there is much more to them than we are going over in this short lesson. If you're interested in learning more data analysis with this data set, we recommend you to take a look at our data fitting lesson</p> <p>If you're interested in seeing another example of how to use histogram plots to visualize data, you can follow this link to an HSF lesson detailing how the Higgs discovery was made using histogram plots.</p>"}]}