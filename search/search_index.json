{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Histograms are a powerful and intuitive way to visualize data, helping to quickly determine the answer to many statistical questions. In Python, it's possible to quickly create histograms using libraries like <code>matplotlib</code> or <code>pandas</code>. These tools allow for you to not only plot the raw data but to adjust bin sizes, add labels, and layer in additional information to make your data clearer. In this lesson, you'll learn how to:</p> <ul> <li> <p>Create simple histograms using <code>matplotlib</code> and <code>pandas</code></p> </li> <li> <p>Understand bins and learn to customize their number and sizes</p> </li> <li> <p>Compare multiple datasets on the same histogram</p> </li> <li> <p>Interpret the shapes of histograms to learn about your data.</p> </li> </ul> <p>For this lesson, we'll be using real data taken in the University of Colorado Denver's physics program from a Gamma Spectroscopy lab. The data was collected from exposing a scintillator and photomultiplier tube to multiple different known radioactive sources with the goal of determining the composition of a final unidentified source. </p> <p>Let's get started by installing the newest versions of Python, matplotlib, and pandas. Click here to continue to the next section to setup our machine and download the necessary files for this lesson.</p>"},{"location":"01_setup/","title":"Setup","text":"<p>If you don't already have Python installed, you can do so by following this link to the official site to begin your download of the newest version. </p> <p>After doing this, it's recommended to use Python with an Integrated Development Environment (IDE). You can use any IDE (e.g., Spyder, PyCharm, Anaconda, etc.), but for this lesson Visual Studio Code is recommended.</p> <p>After installing your chosen IDE, you'll want to create a project folder to store your files and code. You can either create the folder from your file explorer, or create it when prompted upon opening the application.</p> <p>After setting up your IDE and project folder, click here to download the example file. It's recommended to keep it in a subfolder as opposed to leaving it loose in the project folder for the sake of organization.</p> <p>Next, create a new Python file by clicking the <code>New file</code> icon or typing <code>CTRL+N</code>. For this project, it's recommended to create a Jupyter Notebook which uses the <code>.ipynb</code> extension instead of a plain <code>.py</code> file as a Jupyter Notebook can more immediately display plots. </p> <p>Finally, before the IDE will allow you to run any code, it'll require you to to save the new file and choose a Kernel. Create the first code cell and add a simple command (such as <code>print(\"hello world\")</code>) to get it to prompt you to choose a Kernel source.</p> <p>Now, let's get started plotting our data! Click here to continue on to the next section where we'll learn the basics of making and using histograms.</p>"},{"location":"02_understanding_histograms/","title":"Understanding Histograms","text":"<p>A histogram is a type of graph used to represent the distribution of a set of numerical data. Unlike a line or a bar graph where each value or category is plotted directly, a histogram groups data into ranges, called bins, and then counts how many data points fall into each range. This makes it especially useful for identifying patterns in large datasets such as:</p> <ul> <li> <p>Where are the values concentrate?</p> </li> <li> <p>Are there clear peaks?</p> </li> <li> <p>Are there gaps or outliers?</p> </li> <li> <p>What's the range and shape of the data distribution?</p> </li> </ul> <p>In the case of gamma spectroscopy, each detection event is recorded at a specific channel number which corresponds to a range of photon energies. Because there are often hundreds or thousands of individual channels, plotting each one as a bar is more likely to be overwhelming and noisy for elements which aren't as strongly radioactive. A histogram helps us view the overall shape of the data.</p>"},{"location":"02_understanding_histograms/#bins","title":"Bins","text":"<p>Bins divide the range of x-values (channel numbers here) into equal-width segments. Each bin groups all the data points that fall within its range and tallies how many there are, giving the y-axis of a histogram plot. For example, as the detector used 2048 channels, if you decided to use 128 bins for the data each bin would represent 16 adjacent channels/energy levels.</p> <p>Choosing the right number of bins is a balance between detail and readability:</p> <ul> <li> <p>More bins \\(\\to\\) More detail, higher resolution, but potentially noisier. This may help you resolve closely spaced peaks, but it can also amplify noise or fluctuations.</p> </li> <li> <p>Fewer bins \\(\\to\\) Smoother curve, but less resolution. This can help to clarify general trends and reduce noise, but it may blur out small but relevant peaks.</p> </li> </ul> <p>You can experiment with different bin settings depending on what it is that you want to analyze. To locate a peak: start with more bins. To estimate the general shape: start with fewer bins.</p>"},{"location":"02_understanding_histograms/#shape-of-the-data","title":"Shape of the Data","text":"<p>Histograms are useful for diagnosing the statistical nature of your data. A single sharp peak may indicate a well-isolated energy level. A broad peak could point to resolution limitations or overlapping emissions. A tail or skew might suggest background noise, scattering effects, or data artifacts. Understanding such shapes will help in interpreting physical results and deciding whether additional calibration or filtering might be needed. </p> <p>Histograms come in six possible variations:</p> <ul> <li>Symmetric</li> </ul> <p></p> <ul> <li>Skewed right</li> </ul> <p></p> <ul> <li>Skewed left</li> </ul> <p></p> <ul> <li>Bimodal</li> </ul> <p></p> <ul> <li>Multimodal</li> </ul> <p></p> <p>In a histogram plot, the tallest bar represents the data's mode (usually - this can be incorrect if the bin size is poorly chosen or the data is especially noisy). </p> <p>In a symmetric plot the mean, median, and mode should all occur near the same point. </p> <p>In a skewed plot, the mean and median typically shift towards the direction of the skew. </p> <ul> <li> <p>Right skew: mean &gt; median &gt; mode</p> </li> <li> <p>Left skew: mean &lt; median &lt; mode</p> </li> </ul> <p>For bimodal and multimodal plots, the mean and median do not necessarily fall at one of the peaks, and can even lie between the modes depending on the relative height and width of the peaks. So they can become harder to visualize from the plot alone in this case.</p>"},{"location":"02_understanding_histograms/#when-not-to-use-a-histogram","title":"When Not to Use a Histogram","text":"<p>Histograms are best when your data is continuous or pseudo-continuous, and when you care about frequency distributions. If you're comparing a small number of distinct categories, a bar chart is likely a better choice. </p> <p>Now that we have a basic understanding of how to use histograms, click here to continue to the next section where we can try creating one and comparing it to a bar graph using our spectroscopy data.</p>"},{"location":"03_plotting_data/","title":"Importing modules","text":"<p>In order to access data stored in a <code>.csv</code> file, you can use Python's <code>pandas</code> library to read the file before using <code>matplotlib</code> to create the histogram. This is a common workflow in data analysis for exploring the distribution of data. Let's get started by ensuring that you have these libraries installed.</p> <p>In a Jupyter Notebook, it's possible to run terminal commands by prefacing a command with <code>!</code>, but you can also open a terminal at the bottom of the code workspace in VSCode by clicking the three dots at the right of the toolbar and selecting <code>Terminal &gt; New Terminal</code>. Then, run the commands:</p> <pre><code>pip install pandas\npip install matplotlib\n</code></pre> <p>After completing these installs, you'll have to make sure that the modules are imported at the start of your code. In your first cell, include the lines:</p> <pre><code>import matplotlib.pyplot as plt\nimport pandas as pd\n</code></pre>"},{"location":"03_plotting_data/#making-the-histogram","title":"Making the Histogram","text":"<p>Let's begin working to load in our data. One way to simplify this process is to create a method which can be used to load and plot any <code>.csv</code> files which follow the same format instead of repeating the steps for plotting the data for each file. Let's name our method <code>histogram_plot</code>.</p> <p>The only argument <code>histogram_plot</code> will need to take will be the path to the <code>.csv</code> file. It can then be made to return a graph of the data. </p> <p>Let's also take a look at the file before we get started creating our method. Here's the first several lines of the file <code>Co60.csv</code> up until the actual data begins:</p> <p></p> <p>Of note here is that the actual graphable data taken by the software doesn't begin until row 23, with rows 1 to 21 showing the software settings that were used to take the data. Row 22 gives us the column names, Channel, Energy, and Counts. The Energy column is notably empty - data was only saved in the Channel and Counts columns. This means that when we begin plotting our data, we'll need to skip the first 21 rows and then also only use column 2. In <code>pandas</code>, this can be done with the <code>skiprows</code> and <code>usecols</code> keywords before assigning the data to a variable. </p> <p><code>usecols</code> will also reformat the assigned variable so column <code>2</code> will become <code>0</code>. We can then use <code>plt.hist</code> to create a histogram with a chosen number of bins:</p> <pre><code>def histogram_plot(filepath):\n    # Load the data\n    data = pd.read_csv(filepath, skiprows=21, usecols=[2])\n    counts_data = data.iloc[:,0]\n    col_name = data.columns[0]\n\n    # Plot a histgram\n    plt.hist(counts_data, bins=32, edgecolor='black')\n    plt.xlabel(col_name)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Distribution of \" + col_name)\n    plt.savefig(\"cobalt_hist.png\")\n    plt.show()\n</code></pre> <p>After defining <code>histogram_plot</code>, we can then call our method by passing any of our file paths as an argument:</p> <pre><code>histogram_plot(\"radioactive-sources/Co60.csv\")\n</code></pre> <p>Running this will then create the following plot:</p> <p></p>"},{"location":"03_plotting_data/#interpretation","title":"Interpretation","text":"<p>This plot has a large peak in the 75-100 count range. This means that many channels recorded ~75-100 gamma events, likely indicating this as a typical background or baseline rate.</p> <p>This plot is also slightly skewed right. This means that fewer channels recorded higher counts than the mode of \\(\\approx\\) 75. This is to be expected with gamma spectroscopy as the isotope should be releasing fewer higher energy emissions. </p> <p>We can also observe multiple much smaller peaks (around the 0, 25, 200, and 250 counts), although without adjusting the bin count further it might be difficult to determine if these are signals or noise.</p>"},{"location":"03_plotting_data/#comparing-to-a-scatter-plot","title":"Comparing to a Scatter Plot","text":"<p>Now, let's compare this with a scatter plot version of the same data. Let's first define our method:</p> <pre><code>def scatter_plot(filepath):\n    # Load the data\n    data = pd.read_csv(filepath, skiprows=21, usecols=[0,2])\n    x_axis = data.iloc[:,0]\n    x_name = data.columns[0]\n\n    y_axis = data.iloc[:,1]\n    y_name = data.columns[1]\n\n    # Create scatter plot\n    plt.scatter(x_axis, y_axis, s=1)\n    plt.xlabel(x_name)\n    plt.ylabel(y_name)\n    plt.title(\"Scatter Plot\")\n    plt.savefig(\"cobalt_scatter.png\")\n    plt.show()\n</code></pre> <p>We can then pass the same filepath as an argument:</p> <pre><code>scatter_plot(\"radioactive-sources/Co60.csv\")\n</code></pre> <p>Which should result in a graph like this one:</p> <p></p>"},{"location":"03_plotting_data/#interpretation_1","title":"Interpretation","text":"<p>The scatter plot visualizes how count data varies with channel number, showing the full shape of the emitted spectrum. Clear peaks, dips, and trends across 2048 channels. This allows for you to distinguish between narrow, sharp peaks (the characteristic gamma lines) and the broader humps (Compton scattering and background noise).</p> <p>The dip between the ~900 and ~1300 channels likely corresponds to the histogram's mode as many values fall into that mid-count range, even though they're spread across many channels.</p> <p>Now that we've explored how to visualize and interpret gamma spectroscopy data using two different types of plots, we've seen how these different methods of data visualization can provide us with different information from the same dataset. Click here to continue to the conclusion.</p>"},{"location":"04_conclusion/","title":"Conclusion","text":"<p>In this lesson, we've explored how to use Python to load and visualize data from a <code>.csv</code> file using two different types of plots: histograms and scatter plots. By writing flexible, reusable functions, we were able to automate our analysis and create visualizations that highlight different aspects of our data.</p> <p>Histograms are best for answering questions like:</p> <ul> <li> <p>Which values occur the most frequently? </p> </li> <li> <p>What is the overall shape of the data distribution?</p> </li> <li> <p>Are there any outliers or skew in the data?</p> </li> </ul> <p>While other plot types (like scatter plots, line graphs, or bar charts) are more suited for answering questions like:</p> <ul> <li> <p>How do individual data points relate to an independent variable (time, position, channel)?</p> </li> <li> <p>Where do significant changes or features occur in the data?</p> </li> </ul>"},{"location":"04_conclusion/#further-reading","title":"Further Reading","text":"<p>If you're interested in seeing another example of how to use histogram plots to visualize data, you can follow this link to an HSF lesson detailing how the Higgs discovery was made.</p>"}]}